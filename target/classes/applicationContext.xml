<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd 
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <description>Spring公共配置</description>
 	<context:component-scan base-package="pinguo.rocket.*"/>
    <!-- 开启定时任务 -->
    <task:annotation-driven/>    
	
	<!-- 默认拦截器 -->
	<mvc:interceptors>
		<bean class="pinguo.rocket.mq.interceptor.DefaultInterceptor"></bean>
	</mvc:interceptors>
	
	
	
    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:/mybatis/*Mapper.xml" />
		<!-- mybatis配置文件路径 -->
        <property name="configLocation" value="classpath:/mybatis/config.xml"/>    
    </bean>
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sqlSessionFactory" />
       <!-- 这个执行器会批量执行更新语句, 还有SIMPLE 和 REUSE -->
       <constructor-arg index="1" value="BATCH" />
    </bean>

    <!-- 扫描basePackage接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<!-- 映射器接口文件的包路径， -->
        <property name="basePackage" value="pinguo.rocket.mq.dao" />
    </bean>

    <!-- 使用annotation定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- Connection Pooling Info -->
        <property name="maxActive" value="${jdbc.pool.maxActive}" />
        <property name="maxIdle" value="${jdbc.pool.maxIdle}" />
        <property name="minIdle" value="0" />
        <property name="defaultAutoCommit" value="false" />
    </bean>

	<!-- applicationUtil工具类 -->
	<bean id="ApplicationContextUtil" class="pinguo.rocket.mq.comm.ApplicationContextUtil"></bean>
	
	<!-- DefaultMqProducer初始化 -->
	<bean id="PinGuoProducer" class="com.alibaba.rocketmq.client.producer.DefaultMQProducer" scope="singleton">
		<property name="producerGroup" value="${rmq.producerGroup}"></property>
		<property name="namesrvAddr" value="${rmq.namesrvAddr}"></property>
		<property name="retryTimesWhenSendFailed" value="${rmq.retryTimesWhenSendFailed}"></property>
		<property name="sendMsgTimeout" value="${rmq.sendMsgTimeout}"></property>
	</bean>
	
	<!-- DefaultMQPushConsumer初始化 
	<bean id="PinGuoPushConsumerOne" class="com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer" scope="singleton">
		<constructor-arg index="0" value="consumerOne" />
		<property name="namesrvAddr" value="${rmq.namesrvAddr}"></property>
	</bean>
	-->
	<!-- DefaultMQPushConsumer初始化
	<bean id="PinGuoPushConsumerTwo" class="com.alibaba.rocketmq.client.consumer.DefaultMQPushConsumer" scope="singleton">
		<constructor-arg index="0" value="consumerTwo" />
		<property name="namesrvAddr" value="${rmq.namesrvAddr}"></property>
	</bean>
	 -->
	 
	<!-- 初始化rocketmq消费端，不能注解注入，否则会执行两次 -->
	<bean class="pinguo.rocket.mq.component.InitRocketMq" scope="singleton">
	</bean>
	
	<!-- production环境 -->
    <beans profile="production">
        <context:property-placeholder ignore-unresolvable="true" file-encoding="utf-8" 
        location="classpath:/config/production/jdbc.properties,classpath:/config/production/config.properties,classpath:/config/production/rocketmq.properties" />
    </beans>
    <!-- testing环境 -->
    <beans profile="testing">
        <context:property-placeholder ignore-unresolvable="true" file-encoding="utf-8" 
        location="classpath:/config/testing/jdbc.properties,classpath:/config/testing/config.properties,classpath:/config/testing/rocketmq.properties" />
    </beans>   
</beans>